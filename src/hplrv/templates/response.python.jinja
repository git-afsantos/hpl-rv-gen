{# SPDX-License-Identifier: MIT #}
{# Copyright © 2021 André Santos #}

{% import 'common.python.jinja' as G %}
{% import 'predicates.python.jinja' as P %}

{##############################################################################}
{# TIMER MACROS #}
{##############################################################################}

{% macro _on_timer(sm) %}
{# this is called if there is a timeout; the size of the pool must be >= 1 #}
if self._state == {{ G.STATE_ACTIVE }}:
    assert len(self._pool) >= 1, 'missing trigger event'
    {% if sm.pool_size < 0 %}
    # pool is sorted, it suffices to read the first value
    {% endif %}
    if (stamp - self._pool[0].timestamp) >= {{ sm.timeout }}:
        self.witness.append(self._pool.popleft())
{{ G.change_to_state(G.STATE_FALSE, returns=false)|indent(8, first=true) }}
{%- endmacro %}


{##############################################################################}
{# MSG EVENT MACROS #}
{##############################################################################}

{% macro _on_msg(sm, event, topic, from_state) -%}
{% if event.event_type == G.EVENT_ACTIVATOR %}
{# after or after-until -#}
{{ _activator(event, topic) }}
{%- elif event.event_type == G.EVENT_TERMINATOR %}
{# until or after-until -#}
{{ _terminator(sm, event, topic) }}
{%- elif event.event_type == G.EVENT_BEHAVIOUR %}
{{ _behaviour(sm, event, topic) }}
{%- elif event.event_type == G.EVENT_TRIGGER %}
{{ _trigger(sm, event, topic, from_state) }}
{%- else %}
assert False, 'unexpected event type: {{ event.event_type }}'
{%- endif %}
{%- endmacro %}

{% macro _activator(event, topic) -%}
    {% call G.change_to_state_if(event.predicate, G.STATE_ACTIVE, enters_scope=true) %}
self.witness.append(MsgRecord('{{ topic }}', stamp, msg))
    {%- endcall %}
{%- endmacro %}

{% macro _terminator(sm, event, topic) -%}
    {% if event.activator %}
assert len(self.witness) >= 1, 'missing activator event'
v_{{ event.activator }} = self.witness[0].msg
    {% endif %}
    {% if event.verdict == true %}
        {% call G.change_to_state_if(event.predicate, G.STATE_TRUE, exits_scope=true) %}
{{ G.clear_pool(sm) }}
self.witness.append(MsgRecord('{{ topic }}', stamp, msg))
        {%- endcall %}
    {% elif event.verdict == false %}
        {% call G.change_to_state_if(event.predicate, G.STATE_FALSE, exits_scope=true) %}
{{ G.clear_pool(sm) }}
self.witness.append(MsgRecord('{{ topic }}', stamp, msg))
        {%- endcall %}
    {% else %}
        {% call G.change_to_state_if(event.predicate, G.STATE_INACTIVE, exits_scope=true) %}
{{ G.clear_pool(sm) }}
self.witness = []
        {%- endcall %}
    {% endif %}
{%- endmacro %}

{% macro _behaviour(sm, event, topic) -%}
    {% if sm.pool_size != 0 %}
assert len(self._pool) >= 1, 'missing trigger event'
    {% endif %}
    {% if event.activator %}
assert len(self.witness) >= 1, 'missing activator event'
v_{{ event.activator }} = self.witness[0].msg
    {% endif %}
    {% if event.trigger %}
matched = False
for i in range(len(self._pool) - 1, -1, -1):
    v_{{ event.trigger }} = self._pool[i].msg
{{ _drop_if(event.predicate)|indent(4, first=true) -}}
if not self._pool:
{{ G.change_to_state(G.STATE_SAFE, returns=false)|indent(4, first=true) -}}
return matched
    {%- else %}
        {% call G.change_to_state_if(event.predicate, G.STATE_SAFE) %}
# all stimuli have their response
{{ G.clear_pool(sm) }}
        {%- endcall %}
    {%- endif %}
{%- endmacro %}

{% macro _drop_if(phi) -%}
    {% call G.do_if(phi, returns=false) %}
self._pool.pop()
matched = True
    {%- endcall %}
{%- endmacro %}

{% macro _trigger(sm, event, topic, from_state) -%}
    {% if event.activator %}
assert len(self.witness) >= 1, 'missing activator'
v_{{ event.activator }} = self.witness[0].msg
    {% endif %}
    {% if from_state == G.STATE_SAFE %}
        {% call G.change_to_state_if(event.predicate, G.STATE_ACTIVE) %}
{{ G.add_to_pool(sm, topic) }}
        {%- endcall %}
    {% elif from_state == G.STATE_ACTIVE %}
        {% call G.do_if(event.predicate) %}
{{ G.add_to_pool(sm, topic) }}
        {%- endcall %}
    {% else %}
assert False, 'unexpected source state: {{ from_state }}'
    {% endif %}
{%- endmacro %}


{##############################################################################}
{# RENDERED CODE #}
{##############################################################################}

{# assume: global('state_machine') #}
{% call(cb) G.state_machine(state_machine) -%}
    {% if cb == G.CALLBACK_TIMER -%}
{{ _on_timer(state_machine) }}
    {%- elif cb == G.CALLBACK_MSG -%}
{{ _on_msg(state_machine, varargs[0], varargs[1], varargs[2]) }}
    {%- else -%}
assert False, 'unexpected macro function type: {{ args }}'
    {%- endif %}
{%- endcall %}
